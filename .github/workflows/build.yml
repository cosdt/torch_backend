name: Build source and test

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
    paths:
      - '.github/workflows/build.yml'
      - '**/*.py'
      - '**/*.h'
      - '**/*.cpp'
      - '**/*.sh'
      - '**/*.cmake'
      - '**/CMakeLists.txt'
      - '**/.gitmodules'
      - '!**/*.md'
  pull_request:
    branches:
      - 'main'
    paths:
      - '.github/workflows/build.yml'
      - '**/*.py'
      - '**/*.h'
      - '**/*.cpp'
      - '**/*.sh'
      - '**/*.cmake'
      - '**/CMakeLists.txt'
      - '**/.gitmodules'
      - '!**/*.md'
  release:
    types:
      - 'published'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: ${{ !contains(github.ref, 'release/')}}

jobs:
  build:
    name: Build with Python${{ matrix.py-version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        py-version:
          - '3.8'
          - '3.9'
          - '3.10'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Miniconda with Python${{ matrix.py-version }}
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: torchnpu
          python-version: ${{ matrix.py-version }}

      - name: Show versions
        run: |
          conda --version
          python --version
          pip --version

      - name: Install dependencies
        run: |
          conda install -y cmake ninja
          pip install -r requirements.txt

      - name: Install PyTorch
        run: |
          pip install --index-url https://download.pytorch.org/whl/nightly/cpu \
              torch==2.5.0.dev20240725 \
              torchvision==0.20.0.dev20240725 \
              torchaudio==2.4.0.dev20240725

      - name: Compile source
        run: |
          export BUILD_TEST=1
          export INSTALL_TEST=1
          export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
          python setup.py develop

      - name: Run C++ test
        continue-on-error: true # TODO add NPU support
        working-directory: ./build
        run: |
          TORCH_DIR="$(python -c 'import os, torch; print(os.path.dirname(os.path.realpath(torch.__file__)))')"
          TORCH_NPU_BUILD_DIR=$(pwd)
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${TORCH_DIR}/lib/:${TORCH_NPU_BUILD_DIR}/lib/"
          ctest --output-on-failure --verbose
